# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["master"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Ruby
        uses: ruby/setup-ruby@8575951200e472d5f2d95c625da0c7bec8217c42 # v1.161.0
        with:
          ruby-version: '3.1.3' # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
          cache-version: 0 # Increment this number if you need to re-download cached gems
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Build with Jekyll
        # Outputs to the './_site' directory by default
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
      - name: Upload artifact
        # Automatically uploads an artifact from the './_site' directory by default
        uses: actions/upload-pages-artifact@v3
       - name: Versatile PyInstaller With Python3.7 Support
        # You may pin to the exact commit or the version.
        # uses: cha0sCat/pyinstaller@e57125ff2abcdda4bcede82b4b23cb30ddc5eb11
        uses: cha0sCat/pyinstaller@v1.6.2
        with:
          # path of your '.py' or '.spec' file. 
        - This file will be used to create executable.
        - If .py: Generated spec file will also be uploaded as artifact
      
          spec: # default is 
          # path of your requirements.txt file
          requirements: # optional, default is 
          # Options to set for pyinstaller command Ex: options: '--onedir, -F'       (seperated by comma and space)
        - Supported options: Check readme
      
          options: # optional, default is 
          # specific python version you want to use
          python_ver: # optional, default is 3.10
          # specific python architecture you want to use
          python_arch: # optional, default is x64
          # specific pyinstaller version you want to use
          pyinstaller_ver: # optional, default is 
          # Path on runner-os, where generated executable files are stored
          exe_path: # optional, default is ./dist
          # If passed, uploads executable artifact  with this name. Else, artifact won't be uploaded.
          upload_exe_with_name: # optional, default is 
          # If true, perform a clean checkout; if false, skip cleaning. Cleaning will remove all existing local files not in the repository during checkout. If you use utilities like pyinstaller-versionfile, set this to false.
          clean_checkout: # optional, default is true
          # Level of compression for archive (between 0 and 9). 0 = No compression, 9 = Max compression.
          compression_level: # optional, default is 6

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
